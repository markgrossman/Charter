#!/usr/bin/env ruby
require 'gli'
require 'charter'
require_relative "../lib/charter/ConfigStore"

include GLI::App

doc = Doc.new

program_desc 'A command line tool for session based testing'

version Charter::VERSION

desc 'Configure Charter'
arg_name 'config'
command :config do |c|
  c.action do |global_options, options, args|
    store = ConfigStore.new
    config = {} 
    puts "What's your name?"
    config['tester'] = gets.chomp
    puts "What folder would you like the sessions stored in?"
    config['session_folder'] = gets.chomp
    store.write('config', config)
  end
end

desc 'Starts a new session charter'
arg_name 'SessionName'
command :start do |c|
  c.action do |global_options, options, args|
    doc.create_charter(args * ' ')
  end
end

desc 'What are you testing'
arg_name 'purpose'
command :purpose, :p do |c|
  c.action do |global_options, options, args|
    doc.set_purpose(args * ' ')
  end
end

desc 'Add an item to describe system under test'
arg_name 'List your environment'
command :env do |c|
  c.action do |global_options, options, args|
    doc.set_env(args * ' ')
  end
end

desc 'Add a bug found during testing'
arg_name 'Add a bug to the current session'
command :bug do |c|
  c.switch :s
  c.action do |global_options, options, args|
    doc.add_bug(args * ' ')
    doc.take_screenshot(args * ' ') if options[:s]
  end
end

desc 'Describe a scenario here'
arg_name 'Add a scenario to the current session'
command :scenario, :s do |c|
  c.action do |global_options, options, args|
    doc.add_scenario(args * ' ')
  end
end

desc 'Add a note'
arg_name 'Add a note to the current session'
command :note, :n do |c|
  c.action do |global_options, options, args|
    doc.add_note(args * ' ')
  end
end

desc 'Add a tag to your charter'
arg_name 'tag'
command :tag do |c|
  c.action do |global_options, options, args|
    args.each do |tag|
      doc.add_tag(tag)
    end
  end
end

desc 'Find charters with tag'
arg_name 'find'
command :find do |c|
  c.action do |global_options, options, args|
    doc.find_files_with_tags(args * ' ')
  end
end

desc 'Show all charters'
arg_name 'all'
command :all do |c|
  c.action do |global_options, options, args|
    doc.show_all_charters
  end
end

desc 'Final formatting to charter'
arg_name 'Finish the charter'
command :finish do |c|
  c.action do |global_options, options, args|
    doc.finish_charter
  end
end

pre do |global, command, options, args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
